Archive member included because of file (symbol)

/usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
                              ./rgb_led.o (__udivmodqi4)
/usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
                              /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o (exit)
/usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
                              ./main.o (__do_copy_data)
/usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
                              ./main.o (__do_clear_bss)

Memory Configuration

Name             Origin             Length             Attributes
text             0x0000000000000000 0x0000000000002000 xr
data             0x0000000000800060 0x000000000000ffa0 rw !x
eeprom           0x0000000000810000 0x0000000000010000 rw !x
fuse             0x0000000000820000 0x0000000000000400 rw !x
lock             0x0000000000830000 0x0000000000000400 rw !x
signature        0x0000000000840000 0x0000000000000400 rw !x
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
LOAD ./beat_detect.o
LOAD ./main.o
LOAD ./rgb_led.o
LOAD ./sleep.o
LOAD /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a
LOAD /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/libc.a
LOAD /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a

.hash
 *(.hash)

.dynsym
 *(.dynsym)

.dynstr
 *(.dynstr)

.gnu.version
 *(.gnu.version)

.gnu.version_d
 *(.gnu.version_d)

.gnu.version_r
 *(.gnu.version_r)

.rel.init
 *(.rel.init)

.rela.init
 *(.rela.init)

.rel.text
 *(.rel.text)
 *(.rel.text.*)
 *(.rel.gnu.linkonce.t*)

.rela.text
 *(.rela.text)
 *(.rela.text.*)
 *(.rela.gnu.linkonce.t*)

.rel.fini
 *(.rel.fini)

.rela.fini
 *(.rela.fini)

.rel.rodata
 *(.rel.rodata)
 *(.rel.rodata.*)
 *(.rel.gnu.linkonce.r*)

.rela.rodata
 *(.rela.rodata)
 *(.rela.rodata.*)
 *(.rela.gnu.linkonce.r*)

.rel.data
 *(.rel.data)
 *(.rel.data.*)
 *(.rel.gnu.linkonce.d*)

.rela.data
 *(.rela.data)
 *(.rela.data.*)
 *(.rela.gnu.linkonce.d*)

.rel.ctors
 *(.rel.ctors)

.rela.ctors
 *(.rela.ctors)

.rel.dtors
 *(.rel.dtors)

.rela.dtors
 *(.rela.dtors)

.rel.got
 *(.rel.got)

.rela.got
 *(.rela.got)

.rel.bss
 *(.rel.bss)

.rela.bss
 *(.rela.bss)

.rel.plt
 *(.rel.plt)

.rela.plt
 *(.rela.plt)

.text           0x0000000000000000      0x5a8
 *(.vectors)
 .vectors       0x0000000000000000       0x1e /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
                0x0000000000000000                __vectors
                0x0000000000000000                __vector_default
 *(.vectors)
 *(.progmem.gcc*)
 *(.progmem*)
                0x000000000000001e                . = ALIGN (0x2)
                0x000000000000001e                __trampolines_start = .
 *(.trampolines)
 .trampolines   0x000000000000001e        0x0 linker stubs
 *(.trampolines*)
                0x000000000000001e                __trampolines_end = .
 *(.jumptables)
 *(.jumptables*)
 *(.lowtext)
 *(.lowtext*)
                0x000000000000001e                __ctors_start = .
 *(.ctors)
                0x000000000000001e                __ctors_end = .
                0x000000000000001e                __dtors_start = .
 *(.dtors)
                0x000000000000001e                __dtors_end = .
 SORT(*)(.ctors)
 SORT(*)(.dtors)
 *(.init0)
 .init0         0x000000000000001e        0x0 /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
                0x000000000000001e                __init
 *(.init0)
 *(.init1)
 *(.init1)
 *(.init2)
 .init2         0x000000000000001e        0xc /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
 *(.init2)
 *(.init3)
 *(.init3)
 *(.init4)
 .init4         0x000000000000002a       0x16 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
                0x000000000000002a                __do_copy_data
 .init4         0x0000000000000040       0x10 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
                0x0000000000000040                __do_clear_bss
 *(.init4)
 *(.init5)
 *(.init5)
 *(.init6)
 *(.init6)
 *(.init7)
 *(.init7)
 *(.init8)
 *(.init8)
 *(.init9)
 .init9         0x0000000000000050        0x4 /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
 *(.init9)
 *(.text)
 .text          0x0000000000000054        0x2 /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
                0x0000000000000054                __vector_1
                0x0000000000000054                __bad_interrupt
                0x0000000000000054                __vector_6
                0x0000000000000054                __vector_3
                0x0000000000000054                __vector_11
                0x0000000000000054                __vector_13
                0x0000000000000054                __vector_7
                0x0000000000000054                __vector_4
                0x0000000000000054                __vector_9
                0x0000000000000054                __vector_2
                0x0000000000000054                __vector_14
                0x0000000000000054                __vector_10
 .text          0x0000000000000056       0x48 ./beat_detect.o
                0x0000000000000056                beat_detect_init
                0x0000000000000064                beat_detect_start_conversion
                0x0000000000000072                beat_detect_get_last_conversion
                0x0000000000000084                beat_detected
 .text          0x000000000000009e      0x15e ./main.o
                0x000000000000009e                init
                0x00000000000000c4                main
                0x0000000000000168                __vector_5
                0x00000000000001ce                __vector_8
 .text          0x00000000000001fc      0x280 ./rgb_led.o
                0x00000000000001fc                rgb_led_init
                0x0000000000000280                rgb_led_set
                0x00000000000002c8                rgb_led_start_pulse
                0x0000000000000318                rgb_led_step
                0x00000000000003fa                rgb_led_debug_step
 .text          0x000000000000047c      0x110 ./sleep.o
                0x000000000000047c                sleep_init
                0x0000000000000494                sleep_until_next_step
                0x00000000000004fa                sleep_deep_if_no_sound
                0x0000000000000568                __vector_12
 .text          0x000000000000058c        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text          0x000000000000058c        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text          0x000000000000058c        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text          0x000000000000058c        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
                0x000000000000058c                . = ALIGN (0x2)
 *(.text.*)
 .text.libgcc.mul
                0x000000000000058c        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text.libgcc.div
                0x000000000000058c       0x18 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
                0x000000000000058c                __udivmodqi4
 .text.libgcc   0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text.libgcc.prologue
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text.libgcc.builtins
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text.libgcc.fmul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .text.libgcc.mul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc.div
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc   0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc.prologue
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc.builtins
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc.fmul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .text.libgcc.mul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc.div
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc   0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc.prologue
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc.builtins
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc.fmul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .text.libgcc.mul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 .text.libgcc.div
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 .text.libgcc   0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 .text.libgcc.prologue
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 .text.libgcc.builtins
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 .text.libgcc.fmul
                0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
                0x00000000000005a4                . = ALIGN (0x2)
 *(.fini9)
 .fini9         0x00000000000005a4        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
                0x00000000000005a4                exit
                0x00000000000005a4                _exit
 *(.fini9)
 *(.fini8)
 *(.fini8)
 *(.fini7)
 *(.fini7)
 *(.fini6)
 *(.fini6)
 *(.fini5)
 *(.fini5)
 *(.fini4)
 *(.fini4)
 *(.fini3)
 *(.fini3)
 *(.fini2)
 *(.fini2)
 *(.fini1)
 *(.fini1)
 *(.fini0)
 .fini0         0x00000000000005a4        0x4 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 *(.fini0)
                0x00000000000005a8                _etext = .

.data           0x0000000000800060       0x16 load address 0x00000000000005a8
                0x0000000000800060                PROVIDE (__data_start, .)
 *(.data)
 .data          0x0000000000800060        0x0 /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
 .data          0x0000000000800060        0x0 ./beat_detect.o
 .data          0x0000000000800060        0x3 ./main.o
 .data          0x0000000000800063        0x0 ./rgb_led.o
 .data          0x0000000000800063        0x2 ./sleep.o
 .data          0x0000000000800065        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .data          0x0000000000800065        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .data          0x0000000000800065        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .data          0x0000000000800065        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 *(.data*)
 *(.rodata)
 .rodata        0x0000000000800065        0x2 ./main.o
 .rodata        0x0000000000800067        0xd ./rgb_led.o
 .rodata        0x0000000000800074        0x2 ./sleep.o
 *(.rodata*)
 *(.gnu.linkonce.d*)
                0x0000000000800076                . = ALIGN (0x2)
                0x0000000000800076                _edata = .
                0x0000000000800076                PROVIDE (__data_end, .)

.bss            0x0000000000800076        0x5
                0x0000000000800076                PROVIDE (__bss_start, .)
 *(.bss)
 .bss           0x0000000000800076        0x0 /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
 .bss           0x0000000000800076        0x0 ./beat_detect.o
 .bss           0x0000000000800076        0x2 ./main.o
 .bss           0x0000000000800078        0x1 ./rgb_led.o
 .bss           0x0000000000800079        0x2 ./sleep.o
 .bss           0x000000000080007b        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_udivmodqi4.o)
 .bss           0x000000000080007b        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_exit.o)
 .bss           0x000000000080007b        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_copy_data.o)
 .bss           0x000000000080007b        0x0 /usr/lib/gcc/avr/4.7.2/avr25/libgcc.a(_clear_bss.o)
 *(.bss*)
 *(COMMON)
                0x000000000080007b                PROVIDE (__bss_end, .)
                0x00000000000005a8                __data_load_start = LOADADDR (.data)
                0x00000000000005be                __data_load_end = (__data_load_start + SIZEOF (.data))

.noinit         0x000000000080007b        0x0
                0x000000000080007b                PROVIDE (__noinit_start, .)
 *(.noinit*)
                0x000000000080007b                PROVIDE (__noinit_end, .)
                0x000000000080007b                _end = .
                0x000000000080007b                PROVIDE (__heap_start, .)

.eeprom         0x0000000000810000        0x0
 *(.eeprom*)
                0x0000000000810000                __eeprom_end = .

.fuse
 *(.fuse)
 *(.lfuse)
 *(.hfuse)
 *(.efuse)

.lock
 *(.lock*)

.signature
 *(.signature*)

.stab           0x0000000000000000     0x1644
 *(.stab)
 .stab          0x0000000000000000      0x6cc /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o
 .stab          0x00000000000006cc      0x390 ./beat_detect.o
                                        0x39c (size before relaxing)
 .stab          0x0000000000000a5c      0x438 ./main.o
                                        0x600 (size before relaxing)
 .stab          0x0000000000000e94      0x504 ./rgb_led.o
                                        0x6f0 (size before relaxing)
 .stab          0x0000000000001398      0x2ac ./sleep.o
                                        0x474 (size before relaxing)

.stabstr        0x0000000000000000      0xb7f
 *(.stabstr)
 .stabstr       0x0000000000000000      0xb7f /usr/lib/gcc/avr/4.7.2/../../../avr/lib/avr25/crttn45.o

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000       0x11
 *(.comment)
 .comment       0x0000000000000000       0x11 ./beat_detect.o
                                         0x12 (size before relaxing)
 .comment       0x0000000000000000       0x12 ./main.o
 .comment       0x0000000000000000       0x12 ./rgb_led.o
 .comment       0x0000000000000000       0x12 ./sleep.o

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges
 *(.debug_aranges)

.debug_pubnames
 *(.debug_pubnames)

.debug_info
 *(.debug_info)
 *(.gnu.linkonce.wi.*)

.debug_abbrev
 *(.debug_abbrev)

.debug_line
 *(.debug_line)

.debug_frame
 *(.debug_frame)

.debug_str
 *(.debug_str)

.debug_loc
 *(.debug_loc)

.debug_macinfo
 *(.debug_macinfo)
OUTPUT(icecube.elf elf32-avr)
LOAD linker stubs
