
icecube.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000005a8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800076  00800076  00000652  2**0
                  ALLOC
  3 .stab         00001644  00000000  00000000  00000654  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000b7f  00000000  00000000  00001c98  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00002817  2**0
                  CONTENTS, READONLY

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	ae c0       	rjmp	.+348    	; 0x168 <__vector_5>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	de c0       	rjmp	.+444    	; 0x1ce <__vector_8>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	a7 c2       	rjmp	.+1358   	; 0x568 <__vector_12>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d1 e0       	ldi	r29, 0x01	; 1
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e8 ea       	ldi	r30, 0xA8	; 168
  32:	f5 e0       	ldi	r31, 0x05	; 5
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a6 37       	cpi	r26, 0x76	; 118
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	10 e0       	ldi	r17, 0x00	; 0
  42:	a6 e7       	ldi	r26, 0x76	; 118
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	ab 37       	cpi	r26, 0x7B	; 123
  4c:	b1 07       	cpc	r27, r17
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	39 d0       	rcall	.+114    	; 0xc4 <main>
  52:	a8 c2       	rjmp	.+1360   	; 0x5a4 <_exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <beat_detect_init>:
 *      Author: cmerrill
 */
#include <avr/io.h>
#include "beat_detect.h"

void beat_detect_init(void) {
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	cd b7       	in	r28, 0x3d	; 61
  5c:	de b7       	in	r29, 0x3e	; 62

}
  5e:	df 91       	pop	r29
  60:	cf 91       	pop	r28
  62:	08 95       	ret

00000064 <beat_detect_start_conversion>:

void beat_detect_start_conversion(void) {
  64:	cf 93       	push	r28
  66:	df 93       	push	r29
  68:	cd b7       	in	r28, 0x3d	; 61
  6a:	de b7       	in	r29, 0x3e	; 62

}
  6c:	df 91       	pop	r29
  6e:	cf 91       	pop	r28
  70:	08 95       	ret

00000072 <beat_detect_get_last_conversion>:

uint16_t beat_detect_get_last_conversion(void) {
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
  76:	cd b7       	in	r28, 0x3d	; 61
  78:	de b7       	in	r29, 0x3e	; 62
	return 0;
  7a:	80 e0       	ldi	r24, 0x00	; 0
  7c:	90 e0       	ldi	r25, 0x00	; 0
}
  7e:	df 91       	pop	r29
  80:	cf 91       	pop	r28
  82:	08 95       	ret

00000084 <beat_detected>:

bool beat_detected(uint16_t level) {
  84:	cf 93       	push	r28
  86:	df 93       	push	r29
  88:	00 d0       	rcall	.+0      	; 0x8a <beat_detected+0x6>
  8a:	cd b7       	in	r28, 0x3d	; 61
  8c:	de b7       	in	r29, 0x3e	; 62
  8e:	9a 83       	std	Y+2, r25	; 0x02
  90:	89 83       	std	Y+1, r24	; 0x01
	return false;
  92:	80 e0       	ldi	r24, 0x00	; 0
}
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	df 91       	pop	r29
  9a:	cf 91       	pop	r28
  9c:	08 95       	ret

0000009e <init>:


/*
 * Initialize system functions
 */
void init(void) {
  9e:	cf 93       	push	r28
  a0:	df 93       	push	r29
  a2:	cd b7       	in	r28, 0x3d	; 61
  a4:	de b7       	in	r29, 0x3e	; 62
	rgb_led_init();
  a6:	aa d0       	rcall	.+340    	; 0x1fc <rgb_led_init>
	rgb_led_debug_step(1);
  a8:	81 e0       	ldi	r24, 0x01	; 1
  aa:	a7 d1       	rcall	.+846    	; 0x3fa <rgb_led_debug_step>
	beat_detect_init();
  ac:	d4 df       	rcall	.-88     	; 0x56 <beat_detect_init>
	rgb_led_debug_step(2);
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	a4 d1       	rcall	.+840    	; 0x3fa <rgb_led_debug_step>
	sleep_init();
  b2:	e4 d1       	rcall	.+968    	; 0x47c <sleep_init>
	rgb_led_debug_step(3);
  b4:	83 e0       	ldi	r24, 0x03	; 3
  b6:	a1 d1       	rcall	.+834    	; 0x3fa <rgb_led_debug_step>
	main_loop_init();
  b8:	3e d0       	rcall	.+124    	; 0x136 <main_loop_init>
	rgb_led_debug_step(4);
  ba:	84 e0       	ldi	r24, 0x04	; 4
  bc:	9e d1       	rcall	.+828    	; 0x3fa <rgb_led_debug_step>
}
  be:	df 91       	pop	r29
  c0:	cf 91       	pop	r28
  c2:	08 95       	ret

000000c4 <main>:

/*
 * Entry Point into program;
 */
int main(void){
  c4:	cf 93       	push	r28
  c6:	df 93       	push	r29
  c8:	00 d0       	rcall	.+0      	; 0xca <main+0x6>
  ca:	cd b7       	in	r28, 0x3d	; 61
  cc:	de b7       	in	r29, 0x3e	; 62
	init();
  ce:	e7 df       	rcall	.-50     	; 0x9e <init>
	rgb_led_set(0,0,0);
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	60 e0       	ldi	r22, 0x00	; 0
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	d4 d0       	rcall	.+424    	; 0x280 <rgb_led_set>

	// Loop forever -- interrupt controlled from now on.
	sei();
  d8:	78 94       	sei
  da:	01 c0       	rjmp	.+2      	; 0xde <main+0x1a>
			}
		}
		else {
			sleep_until_next_step();
		}
	}
  dc:	00 00       	nop
	// Loop forever -- interrupt controlled from now on.
	sei();
	while(1) {
		uint16_t sample;

		if (sample_ADC) {
  de:	80 91 76 00 	lds	r24, 0x0076
  e2:	88 23       	and	r24, r24
  e4:	29 f0       	breq	.+10     	; 0xf0 <main+0x2c>
			sample_ADC = false;
  e6:	10 92 76 00 	sts	0x0076, r1
			ADC_done = false;
  ea:	10 92 77 00 	sts	0x0077, r1
			beat_detect_start_conversion();
  ee:	ba df       	rcall	.-140    	; 0x64 <beat_detect_start_conversion>
		}

		if (step_LED) {
  f0:	80 91 62 00 	lds	r24, 0x0062
  f4:	88 23       	and	r24, r24
  f6:	19 f0       	breq	.+6      	; 0xfe <main+0x3a>
			step_LED = false;
  f8:	10 92 62 00 	sts	0x0062, r1
			rgb_led_step();
  fc:	0d d1       	rcall	.+538    	; 0x318 <rgb_led_step>
		}

		if (ADC_done) {
  fe:	80 91 77 00 	lds	r24, 0x0077
 102:	88 23       	and	r24, r24
 104:	b1 f0       	breq	.+44     	; 0x132 <main+0x6e>
			ADC_done = false;
 106:	10 92 77 00 	sts	0x0077, r1
			sample = beat_detect_get_last_conversion();
 10a:	b3 df       	rcall	.-154    	; 0x72 <beat_detect_get_last_conversion>
 10c:	9a 83       	std	Y+2, r25	; 0x02
 10e:	89 83       	std	Y+1, r24	; 0x01
			if (beat_detected(sample)) {
 110:	89 81       	ldd	r24, Y+1	; 0x01
 112:	9a 81       	ldd	r25, Y+2	; 0x02
 114:	b7 df       	rcall	.-146    	; 0x84 <beat_detected>
 116:	88 23       	and	r24, r24
 118:	11 f0       	breq	.+4      	; 0x11e <main+0x5a>
				//FIXME: Add cooler color options here.
				rgb_led_start_pulse(RED);
 11a:	81 e0       	ldi	r24, 0x01	; 1
 11c:	d5 d0       	rcall	.+426    	; 0x2c8 <rgb_led_start_pulse>
			}

			if(!(sleep_deep_if_no_sound(sample))) {
 11e:	89 81       	ldd	r24, Y+1	; 0x01
 120:	9a 81       	ldd	r25, Y+2	; 0x02
 122:	eb d1       	rcall	.+982    	; 0x4fa <sleep_deep_if_no_sound>
 124:	98 2f       	mov	r25, r24
 126:	81 e0       	ldi	r24, 0x01	; 1
 128:	89 27       	eor	r24, r25
 12a:	88 23       	and	r24, r24
 12c:	b9 f2       	breq	.-82     	; 0xdc <main+0x18>
				sleep_until_next_step();
 12e:	b2 d1       	rcall	.+868    	; 0x494 <sleep_until_next_step>
			}
		}
		else {
			sleep_until_next_step();
		}
	}
 130:	d5 cf       	rjmp	.-86     	; 0xdc <main+0x18>
			if(!(sleep_deep_if_no_sound(sample))) {
				sleep_until_next_step();
			}
		}
		else {
			sleep_until_next_step();
 132:	b0 d1       	rcall	.+864    	; 0x494 <sleep_until_next_step>
		}
	}
 134:	d3 cf       	rjmp	.-90     	; 0xdc <main+0x18>

00000136 <main_loop_init>:
}

/*
 * Initialize main loop interrupt settings
 */
static void main_loop_init(void) {
 136:	cf 93       	push	r28
 138:	df 93       	push	r29
 13a:	cd b7       	in	r28, 0x3d	; 61
 13c:	de b7       	in	r29, 0x3e	; 62
	TIMSK |= _BV(TOIE0);
 13e:	89 e5       	ldi	r24, 0x59	; 89
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	29 e5       	ldi	r18, 0x59	; 89
 144:	30 e0       	ldi	r19, 0x00	; 0
 146:	f9 01       	movw	r30, r18
 148:	20 81       	ld	r18, Z
 14a:	22 60       	ori	r18, 0x02	; 2
 14c:	fc 01       	movw	r30, r24
 14e:	20 83       	st	Z, r18
	ADCSRA |= _BV(ADIE);
 150:	86 e2       	ldi	r24, 0x26	; 38
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	26 e2       	ldi	r18, 0x26	; 38
 156:	30 e0       	ldi	r19, 0x00	; 0
 158:	f9 01       	movw	r30, r18
 15a:	20 81       	ld	r18, Z
 15c:	28 60       	ori	r18, 0x08	; 8
 15e:	fc 01       	movw	r30, r24
 160:	20 83       	st	Z, r18
}
 162:	df 91       	pop	r29
 164:	cf 91       	pop	r28
 166:	08 95       	ret

00000168 <__vector_5>:

/*
 * Main control interrupt
 */
ISR(TIMER0_OVF_vect) {
 168:	1f 92       	push	r1
 16a:	0f 92       	push	r0
 16c:	00 90 5f 00 	lds	r0, 0x005F
 170:	0f 92       	push	r0
 172:	11 24       	eor	r1, r1
 174:	8f 93       	push	r24
 176:	9f 93       	push	r25
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	cd b7       	in	r28, 0x3d	; 61
 17e:	de b7       	in	r29, 0x3e	; 62
	if (loop_counter == 0) {
 180:	80 91 60 00 	lds	r24, 0x0060
 184:	90 91 61 00 	lds	r25, 0x0061
 188:	00 97       	sbiw	r24, 0x00	; 0
 18a:	71 f4       	brne	.+28     	; 0x1a8 <__vector_5+0x40>
		loop_counter = max_count;
 18c:	80 91 65 00 	lds	r24, 0x0065
 190:	90 91 66 00 	lds	r25, 0x0066
 194:	90 93 61 00 	sts	0x0061, r25
 198:	80 93 60 00 	sts	0x0060, r24
		// Tell main loop so sample ADC and step the LED
		sample_ADC = true;
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	80 93 76 00 	sts	0x0076, r24
		step_LED = true;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 62 00 	sts	0x0062, r24
	}

	// Decrement loop counter
	loop_counter--;
 1a8:	80 91 60 00 	lds	r24, 0x0060
 1ac:	90 91 61 00 	lds	r25, 0x0061
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	90 93 61 00 	sts	0x0061, r25
 1b6:	80 93 60 00 	sts	0x0060, r24
}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	0f 90       	pop	r0
 1c4:	00 92 5f 00 	sts	0x005F, r0
 1c8:	0f 90       	pop	r0
 1ca:	1f 90       	pop	r1
 1cc:	18 95       	reti

000001ce <__vector_8>:

/*
 * ADC sample complete interrupt
 */
ISR(ADC_vect) {
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	00 90 5f 00 	lds	r0, 0x005F
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
 1dc:	cf 93       	push	r28
 1de:	df 93       	push	r29
 1e0:	cd b7       	in	r28, 0x3d	; 61
 1e2:	de b7       	in	r29, 0x3e	; 62
	ADC_done = true;
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 77 00 	sts	0x0077, r24
}
 1ea:	df 91       	pop	r29
 1ec:	cf 91       	pop	r28
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	00 92 5f 00 	sts	0x005F, r0
 1f6:	0f 90       	pop	r0
 1f8:	1f 90       	pop	r1
 1fa:	18 95       	reti

000001fc <rgb_led_init>:
static uint8_t led_fade = 0;

/*
 * Initialize the RGB LED PWM timer units
 */
void rgb_led_init(void) {
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
 200:	cd b7       	in	r28, 0x3d	; 61
 202:	de b7       	in	r29, 0x3e	; 62
	// Setup IO port parameters
	PORTB |= (1 << 4) | (1 << 1) | (1 << 0);
 204:	88 e3       	ldi	r24, 0x38	; 56
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	28 e3       	ldi	r18, 0x38	; 56
 20a:	30 e0       	ldi	r19, 0x00	; 0
 20c:	f9 01       	movw	r30, r18
 20e:	20 81       	ld	r18, Z
 210:	23 61       	ori	r18, 0x13	; 19
 212:	fc 01       	movw	r30, r24
 214:	20 83       	st	Z, r18
	DDRB |= (1 << 4) | (1 << 1) | (1 << 0);
 216:	87 e3       	ldi	r24, 0x37	; 55
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	27 e3       	ldi	r18, 0x37	; 55
 21c:	30 e0       	ldi	r19, 0x00	; 0
 21e:	f9 01       	movw	r30, r18
 220:	20 81       	ld	r18, Z
 222:	23 61       	ori	r18, 0x13	; 19
 224:	fc 01       	movw	r30, r24
 226:	20 83       	st	Z, r18

	// Setup timer parameters
	// Fast PWM mode, inverted output (set on compare match)
	// Internal system clock source, no divider
	TCCR0A = _BV(COM0A1) + _BV(COM0A0) + _BV(WGM00) + _BV(WGM01);
 228:	8a e4       	ldi	r24, 0x4A	; 74
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	23 ec       	ldi	r18, 0xC3	; 195
 22e:	fc 01       	movw	r30, r24
 230:	20 83       	st	Z, r18
	TCCR0B = _BV(CS00);
 232:	83 e5       	ldi	r24, 0x53	; 83
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	21 e0       	ldi	r18, 0x01	; 1
 238:	fc 01       	movw	r30, r24
 23a:	20 83       	st	Z, r18
	// T1 is special because it is designed for super fast PWM
	// Look at data sheet for settings details.
	// We need to make sure that T1 channel A & B are set the same
	// due to a hardware bug. See errata for ATTiny45 before rev D.
	TCCR1  = _BV(PWM1A) + _BV(COM1A1) + _BV(COM1A0) + _BV(CS10);
 23c:	80 e5       	ldi	r24, 0x50	; 80
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	21 e7       	ldi	r18, 0x71	; 113
 242:	fc 01       	movw	r30, r24
 244:	20 83       	st	Z, r18
	GTCCR |= _BV(PWM1B) + _BV(COM1B1) + _BV(COM1B0);
 246:	8c e4       	ldi	r24, 0x4C	; 76
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	2c e4       	ldi	r18, 0x4C	; 76
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	f9 01       	movw	r30, r18
 250:	20 81       	ld	r18, Z
 252:	20 67       	ori	r18, 0x70	; 112
 254:	fc 01       	movw	r30, r24
 256:	20 83       	st	Z, r18
	OCR1C = 255;
 258:	8d e4       	ldi	r24, 0x4D	; 77
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	2f ef       	ldi	r18, 0xFF	; 255
 25e:	fc 01       	movw	r30, r24
 260:	20 83       	st	Z, r18

	// Set default brightness to "off"
	OCR0A = 0;
 262:	89 e4       	ldi	r24, 0x49	; 73
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	fc 01       	movw	r30, r24
 268:	10 82       	st	Z, r1
	OCR1A = 0;
 26a:	8e e4       	ldi	r24, 0x4E	; 78
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	fc 01       	movw	r30, r24
 270:	10 82       	st	Z, r1
	OCR1B = 0;
 272:	8b e4       	ldi	r24, 0x4B	; 75
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	fc 01       	movw	r30, r24
 278:	10 82       	st	Z, r1
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <rgb_led_set>:


/*
 * Set RGB LED color & brightness
 */
void rgb_led_set(uint8_t red, uint8_t green, uint8_t blue) {
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	00 d0       	rcall	.+0      	; 0x286 <rgb_led_set+0x6>
 286:	1f 92       	push	r1
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	89 83       	std	Y+1, r24	; 0x01
 28e:	6a 83       	std	Y+2, r22	; 0x02
 290:	4b 83       	std	Y+3, r20	; 0x03
	*(rgb_led.red)  = red;
 292:	80 91 67 00 	lds	r24, 0x0067
 296:	90 91 68 00 	lds	r25, 0x0068
 29a:	29 81       	ldd	r18, Y+1	; 0x01
 29c:	fc 01       	movw	r30, r24
 29e:	20 83       	st	Z, r18
	*(rgb_led.green) = green;
 2a0:	80 91 69 00 	lds	r24, 0x0069
 2a4:	90 91 6a 00 	lds	r25, 0x006A
 2a8:	2a 81       	ldd	r18, Y+2	; 0x02
 2aa:	fc 01       	movw	r30, r24
 2ac:	20 83       	st	Z, r18
	*(rgb_led.blue)  = blue;
 2ae:	80 91 6b 00 	lds	r24, 0x006B
 2b2:	90 91 6c 00 	lds	r25, 0x006C
 2b6:	2b 81       	ldd	r18, Y+3	; 0x03
 2b8:	fc 01       	movw	r30, r24
 2ba:	20 83       	st	Z, r18
}
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <rgb_led_start_pulse>:

/*
 * Trigger a pulse on specific colors
 */
void rgb_led_start_pulse(uint8_t color) {
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	1f 92       	push	r1
 2ce:	cd b7       	in	r28, 0x3d	; 61
 2d0:	de b7       	in	r29, 0x3e	; 62
 2d2:	89 83       	std	Y+1, r24	; 0x01
	led_fade |= color;
 2d4:	90 91 78 00 	lds	r25, 0x0078
 2d8:	89 81       	ldd	r24, Y+1	; 0x01
 2da:	89 2b       	or	r24, r25
 2dc:	80 93 78 00 	sts	0x0078, r24
}
 2e0:	0f 90       	pop	r0
 2e2:	df 91       	pop	r29
 2e4:	cf 91       	pop	r28
 2e6:	08 95       	ret

000002e8 <next_fade_brightness>:

/*
 * Adjust the brightness to follow a fade pattern
 */
static uint8_t next_fade_brightness(uint8_t last_output) {
 2e8:	cf 93       	push	r28
 2ea:	df 93       	push	r29
 2ec:	00 d0       	rcall	.+0      	; 0x2ee <next_fade_brightness+0x6>
 2ee:	1f 92       	push	r1
 2f0:	cd b7       	in	r28, 0x3d	; 61
 2f2:	de b7       	in	r29, 0x3e	; 62
 2f4:	8b 83       	std	Y+3, r24	; 0x03
	const uint8_t max_brightness = 254; // This should be even
 2f6:	8e ef       	ldi	r24, 0xFE	; 254
 2f8:	89 83       	std	Y+1, r24	; 0x01
	uint8_t output;

	if (last_output == 0) {
 2fa:	8b 81       	ldd	r24, Y+3	; 0x03
 2fc:	88 23       	and	r24, r24
 2fe:	21 f4       	brne	.+8      	; 0x308 <next_fade_brightness+0x20>
		output = max_brightness;
 300:	89 81       	ldd	r24, Y+1	; 0x01
 302:	8a 83       	std	Y+2, r24	; 0x02
		return output;
 304:	8a 81       	ldd	r24, Y+2	; 0x02
 306:	02 c0       	rjmp	.+4      	; 0x30c <next_fade_brightness+0x24>
	}
	else {
		return last_output - 4;
 308:	8b 81       	ldd	r24, Y+3	; 0x03
 30a:	84 50       	subi	r24, 0x04	; 4
	}

}
 30c:	0f 90       	pop	r0
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <rgb_led_step>:

/*
 * Step through the fade routine for each color.
 */
void rgb_led_step(void) {
 318:	0f 93       	push	r16
 31a:	1f 93       	push	r17
 31c:	cf 93       	push	r28
 31e:	df 93       	push	r29
 320:	cd b7       	in	r28, 0x3d	; 61
 322:	de b7       	in	r29, 0x3e	; 62
	if (led_fade & RED) {
 324:	80 91 78 00 	lds	r24, 0x0078
 328:	88 2f       	mov	r24, r24
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	81 70       	andi	r24, 0x01	; 1
 32e:	99 27       	eor	r25, r25
 330:	00 97       	sbiw	r24, 0x00	; 0
 332:	d1 f0       	breq	.+52     	; 0x368 <rgb_led_step+0x50>
		*(rgb_led.red) = next_fade_brightness(*(rgb_led.red));
 334:	00 91 67 00 	lds	r16, 0x0067
 338:	10 91 68 00 	lds	r17, 0x0068
 33c:	80 91 67 00 	lds	r24, 0x0067
 340:	90 91 68 00 	lds	r25, 0x0068
 344:	fc 01       	movw	r30, r24
 346:	80 81       	ld	r24, Z
 348:	cf df       	rcall	.-98     	; 0x2e8 <next_fade_brightness>
 34a:	f8 01       	movw	r30, r16
 34c:	80 83       	st	Z, r24
		if (*(rgb_led.red) == 0) led_fade &= ~RED;
 34e:	80 91 67 00 	lds	r24, 0x0067
 352:	90 91 68 00 	lds	r25, 0x0068
 356:	fc 01       	movw	r30, r24
 358:	80 81       	ld	r24, Z
 35a:	88 23       	and	r24, r24
 35c:	29 f4       	brne	.+10     	; 0x368 <rgb_led_step+0x50>
 35e:	80 91 78 00 	lds	r24, 0x0078
 362:	8e 7f       	andi	r24, 0xFE	; 254
 364:	80 93 78 00 	sts	0x0078, r24
	}
	if (led_fade & GREEN) {
 368:	80 91 78 00 	lds	r24, 0x0078
 36c:	88 2f       	mov	r24, r24
 36e:	90 e0       	ldi	r25, 0x00	; 0
 370:	82 70       	andi	r24, 0x02	; 2
 372:	99 27       	eor	r25, r25
 374:	00 97       	sbiw	r24, 0x00	; 0
 376:	d1 f0       	breq	.+52     	; 0x3ac <rgb_led_step+0x94>
		*(rgb_led.green) = next_fade_brightness(*(rgb_led.green));
 378:	00 91 69 00 	lds	r16, 0x0069
 37c:	10 91 6a 00 	lds	r17, 0x006A
 380:	80 91 69 00 	lds	r24, 0x0069
 384:	90 91 6a 00 	lds	r25, 0x006A
 388:	fc 01       	movw	r30, r24
 38a:	80 81       	ld	r24, Z
 38c:	ad df       	rcall	.-166    	; 0x2e8 <next_fade_brightness>
 38e:	f8 01       	movw	r30, r16
 390:	80 83       	st	Z, r24
		if (*(rgb_led.green) == 0) led_fade &= ~GREEN;
 392:	80 91 69 00 	lds	r24, 0x0069
 396:	90 91 6a 00 	lds	r25, 0x006A
 39a:	fc 01       	movw	r30, r24
 39c:	80 81       	ld	r24, Z
 39e:	88 23       	and	r24, r24
 3a0:	29 f4       	brne	.+10     	; 0x3ac <rgb_led_step+0x94>
 3a2:	80 91 78 00 	lds	r24, 0x0078
 3a6:	8d 7f       	andi	r24, 0xFD	; 253
 3a8:	80 93 78 00 	sts	0x0078, r24
	}
	if (led_fade & BLUE) {
 3ac:	80 91 78 00 	lds	r24, 0x0078
 3b0:	88 2f       	mov	r24, r24
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	84 70       	andi	r24, 0x04	; 4
 3b6:	99 27       	eor	r25, r25
 3b8:	00 97       	sbiw	r24, 0x00	; 0
 3ba:	d1 f0       	breq	.+52     	; 0x3f0 <rgb_led_step+0xd8>
		*(rgb_led.blue) = next_fade_brightness(*(rgb_led.blue));
 3bc:	00 91 6b 00 	lds	r16, 0x006B
 3c0:	10 91 6c 00 	lds	r17, 0x006C
 3c4:	80 91 6b 00 	lds	r24, 0x006B
 3c8:	90 91 6c 00 	lds	r25, 0x006C
 3cc:	fc 01       	movw	r30, r24
 3ce:	80 81       	ld	r24, Z
 3d0:	8b df       	rcall	.-234    	; 0x2e8 <next_fade_brightness>
 3d2:	f8 01       	movw	r30, r16
 3d4:	80 83       	st	Z, r24
		if (*(rgb_led.blue) == 0) led_fade &= ~BLUE;
 3d6:	80 91 6b 00 	lds	r24, 0x006B
 3da:	90 91 6c 00 	lds	r25, 0x006C
 3de:	fc 01       	movw	r30, r24
 3e0:	80 81       	ld	r24, Z
 3e2:	88 23       	and	r24, r24
 3e4:	29 f4       	brne	.+10     	; 0x3f0 <rgb_led_step+0xd8>
 3e6:	80 91 78 00 	lds	r24, 0x0078
 3ea:	8b 7f       	andi	r24, 0xFB	; 251
 3ec:	80 93 78 00 	sts	0x0078, r24
	}
}
 3f0:	df 91       	pop	r29
 3f2:	cf 91       	pop	r28
 3f4:	1f 91       	pop	r17
 3f6:	0f 91       	pop	r16
 3f8:	08 95       	ret

000003fa <rgb_led_debug_step>:

void rgb_led_debug_step(uint8_t index) {
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
 3fe:	00 d0       	rcall	.+0      	; 0x400 <rgb_led_debug_step+0x6>
 400:	00 d0       	rcall	.+0      	; 0x402 <rgb_led_debug_step+0x8>
 402:	1f 92       	push	r1
 404:	cd b7       	in	r28, 0x3d	; 61
 406:	de b7       	in	r29, 0x3e	; 62
 408:	8d 83       	std	Y+5, r24	; 0x05
	uint8_t color = debug_colors[index % (sizeof(debug_colors)/sizeof(debug_colors[0]))];
 40a:	8d 81       	ldd	r24, Y+5	; 0x05
 40c:	97 e0       	ldi	r25, 0x07	; 7
 40e:	69 2f       	mov	r22, r25
 410:	bd d0       	rcall	.+378    	; 0x58c <__udivmodqi4>
 412:	89 2f       	mov	r24, r25
 414:	88 2f       	mov	r24, r24
 416:	90 e0       	ldi	r25, 0x00	; 0
 418:	83 59       	subi	r24, 0x93	; 147
 41a:	9f 4f       	sbci	r25, 0xFF	; 255
 41c:	fc 01       	movw	r30, r24
 41e:	80 81       	ld	r24, Z
 420:	89 83       	std	Y+1, r24	; 0x01
	uint8_t red = (color & RED) ? 255 : 0;
 422:	89 81       	ldd	r24, Y+1	; 0x01
 424:	88 2f       	mov	r24, r24
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	81 70       	andi	r24, 0x01	; 1
 42a:	99 27       	eor	r25, r25
 42c:	00 97       	sbiw	r24, 0x00	; 0
 42e:	11 f0       	breq	.+4      	; 0x434 <rgb_led_debug_step+0x3a>
 430:	8f ef       	ldi	r24, 0xFF	; 255
 432:	01 c0       	rjmp	.+2      	; 0x436 <rgb_led_debug_step+0x3c>
 434:	80 e0       	ldi	r24, 0x00	; 0
 436:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t green = (color & GREEN) ? 255 : 0;
 438:	89 81       	ldd	r24, Y+1	; 0x01
 43a:	88 2f       	mov	r24, r24
 43c:	90 e0       	ldi	r25, 0x00	; 0
 43e:	82 70       	andi	r24, 0x02	; 2
 440:	99 27       	eor	r25, r25
 442:	00 97       	sbiw	r24, 0x00	; 0
 444:	11 f0       	breq	.+4      	; 0x44a <rgb_led_debug_step+0x50>
 446:	8f ef       	ldi	r24, 0xFF	; 255
 448:	01 c0       	rjmp	.+2      	; 0x44c <rgb_led_debug_step+0x52>
 44a:	80 e0       	ldi	r24, 0x00	; 0
 44c:	8b 83       	std	Y+3, r24	; 0x03
	uint8_t blue = (color & BLUE) ? 255 : 0;
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	88 2f       	mov	r24, r24
 452:	90 e0       	ldi	r25, 0x00	; 0
 454:	84 70       	andi	r24, 0x04	; 4
 456:	99 27       	eor	r25, r25
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	11 f0       	breq	.+4      	; 0x460 <rgb_led_debug_step+0x66>
 45c:	8f ef       	ldi	r24, 0xFF	; 255
 45e:	01 c0       	rjmp	.+2      	; 0x462 <rgb_led_debug_step+0x68>
 460:	80 e0       	ldi	r24, 0x00	; 0
 462:	8c 83       	std	Y+4, r24	; 0x04
	rgb_led_set(red,green,blue);
 464:	4c 81       	ldd	r20, Y+4	; 0x04
 466:	6b 81       	ldd	r22, Y+3	; 0x03
 468:	8a 81       	ldd	r24, Y+2	; 0x02
 46a:	0a df       	rcall	.-492    	; 0x280 <rgb_led_set>
}
 46c:	0f 90       	pop	r0
 46e:	0f 90       	pop	r0
 470:	0f 90       	pop	r0
 472:	0f 90       	pop	r0
 474:	0f 90       	pop	r0
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	08 95       	ret

0000047c <sleep_init>:
static uint16_t samples_below = 800;

/*
 * Initialize watchdog timer to ensure wakeup from sleep mode.
 */
void sleep_init(void) {
 47c:	cf 93       	push	r28
 47e:	df 93       	push	r29
 480:	cd b7       	in	r28, 0x3d	; 61
 482:	de b7       	in	r29, 0x3e	; 62
	// Enable watchdog timer interrupt
	// Period is ~approx 1s
	WDTCR = _BV(WDIE) + _BV(WDP2) + _BV(WDP1);
 484:	81 e4       	ldi	r24, 0x41	; 65
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	26 e4       	ldi	r18, 0x46	; 70
 48a:	fc 01       	movw	r30, r24
 48c:	20 83       	st	Z, r18
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <sleep_until_next_step>:

/*
 * Sleep until the next timer tick or the next ADC signal.
 */
void sleep_until_next_step(void) {
 494:	cf 93       	push	r28
 496:	df 93       	push	r29
 498:	cd b7       	in	r28, 0x3d	; 61
 49a:	de b7       	in	r29, 0x3e	; 62
	// Disable the ADC to save power.
	ADCSRA &= ~_BV(ADEN);
 49c:	86 e2       	ldi	r24, 0x26	; 38
 49e:	90 e0       	ldi	r25, 0x00	; 0
 4a0:	26 e2       	ldi	r18, 0x26	; 38
 4a2:	30 e0       	ldi	r19, 0x00	; 0
 4a4:	f9 01       	movw	r30, r18
 4a6:	20 81       	ld	r18, Z
 4a8:	2f 77       	andi	r18, 0x7F	; 127
 4aa:	fc 01       	movw	r30, r24
 4ac:	20 83       	st	Z, r18

	// Set sleep mode to idle mode
	set_sleep_mode(SLEEP_MODE_IDLE);
 4ae:	85 e5       	ldi	r24, 0x55	; 85
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	25 e5       	ldi	r18, 0x55	; 85
 4b4:	30 e0       	ldi	r19, 0x00	; 0
 4b6:	f9 01       	movw	r30, r18
 4b8:	20 81       	ld	r18, Z
 4ba:	27 7e       	andi	r18, 0xE7	; 231
 4bc:	fc 01       	movw	r30, r24
 4be:	20 83       	st	Z, r18
	sleep_enable();
 4c0:	85 e5       	ldi	r24, 0x55	; 85
 4c2:	90 e0       	ldi	r25, 0x00	; 0
 4c4:	25 e5       	ldi	r18, 0x55	; 85
 4c6:	30 e0       	ldi	r19, 0x00	; 0
 4c8:	f9 01       	movw	r30, r18
 4ca:	20 81       	ld	r18, Z
 4cc:	20 62       	ori	r18, 0x20	; 32
 4ce:	fc 01       	movw	r30, r24
 4d0:	20 83       	st	Z, r18

	// Sleep!
	sleep_cpu();
 4d2:	88 95       	sleep

	// Disable processor sleep.
	sleep_disable();
 4d4:	85 e5       	ldi	r24, 0x55	; 85
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	25 e5       	ldi	r18, 0x55	; 85
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	2f 7d       	andi	r18, 0xDF	; 223
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
}
 4e6:	df 91       	pop	r29
 4e8:	cf 91       	pop	r28
 4ea:	08 95       	ret

000004ec <sleep_deep>:

/*
 * Go into a deep sleep mode
 */
static void sleep_deep(void) {
 4ec:	cf 93       	push	r28
 4ee:	df 93       	push	r29
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62

}
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <sleep_deep_if_no_sound>:

/**
 * If we haven't gotten any signal, go in to a deep sleep mode.
 * This will disable the timer and the ADC.
 */
bool sleep_deep_if_no_sound(uint16_t level) {
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	00 d0       	rcall	.+0      	; 0x500 <sleep_deep_if_no_sound+0x6>
 500:	cd b7       	in	r28, 0x3d	; 61
 502:	de b7       	in	r29, 0x3e	; 62
 504:	9a 83       	std	Y+2, r25	; 0x02
 506:	89 83       	std	Y+1, r24	; 0x01
	if (samples_below == 0) {
 508:	80 91 63 00 	lds	r24, 0x0063
 50c:	90 91 64 00 	lds	r25, 0x0064
 510:	00 97       	sbiw	r24, 0x00	; 0
 512:	49 f4       	brne	.+18     	; 0x526 <sleep_deep_if_no_sound+0x2c>
		samples_below = 4;
 514:	84 e0       	ldi	r24, 0x04	; 4
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	90 93 64 00 	sts	0x0064, r25
 51c:	80 93 63 00 	sts	0x0063, r24
		sleep_deep();
 520:	e5 df       	rcall	.-54     	; 0x4ec <sleep_deep>
		return true;
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	1c c0       	rjmp	.+56     	; 0x55e <sleep_deep_if_no_sound+0x64>
	}
	if (level < min_awake_level) {
 526:	80 91 74 00 	lds	r24, 0x0074
 52a:	90 91 75 00 	lds	r25, 0x0075
 52e:	29 81       	ldd	r18, Y+1	; 0x01
 530:	3a 81       	ldd	r19, Y+2	; 0x02
 532:	28 17       	cp	r18, r24
 534:	39 07       	cpc	r19, r25
 536:	50 f4       	brcc	.+20     	; 0x54c <sleep_deep_if_no_sound+0x52>
		samples_below -= 1;
 538:	80 91 63 00 	lds	r24, 0x0063
 53c:	90 91 64 00 	lds	r25, 0x0064
 540:	01 97       	sbiw	r24, 0x01	; 1
 542:	90 93 64 00 	sts	0x0064, r25
 546:	80 93 63 00 	sts	0x0063, r24
 54a:	08 c0       	rjmp	.+16     	; 0x55c <sleep_deep_if_no_sound+0x62>
	}
	else {
		samples_below = sample_below_reload_value;
 54c:	80 91 79 00 	lds	r24, 0x0079
 550:	90 91 7a 00 	lds	r25, 0x007A
 554:	90 93 64 00 	sts	0x0064, r25
 558:	80 93 63 00 	sts	0x0063, r24
	}
	return false;
 55c:	80 e0       	ldi	r24, 0x00	; 0
}
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <__vector_12>:

/*
 * Watchdog timer wakeup interrupt. Does nothing but exist.
 */
ISR(WDT_vect) {}
 568:	1f 92       	push	r1
 56a:	0f 92       	push	r0
 56c:	00 90 5f 00 	lds	r0, 0x005F
 570:	0f 92       	push	r0
 572:	11 24       	eor	r1, r1
 574:	cf 93       	push	r28
 576:	df 93       	push	r29
 578:	cd b7       	in	r28, 0x3d	; 61
 57a:	de b7       	in	r29, 0x3e	; 62
 57c:	df 91       	pop	r29
 57e:	cf 91       	pop	r28
 580:	0f 90       	pop	r0
 582:	00 92 5f 00 	sts	0x005F, r0
 586:	0f 90       	pop	r0
 588:	1f 90       	pop	r1
 58a:	18 95       	reti

0000058c <__udivmodqi4>:
 58c:	99 1b       	sub	r25, r25
 58e:	79 e0       	ldi	r23, 0x09	; 9
 590:	04 c0       	rjmp	.+8      	; 0x59a <__udivmodqi4_ep>

00000592 <__udivmodqi4_loop>:
 592:	99 1f       	adc	r25, r25
 594:	96 17       	cp	r25, r22
 596:	08 f0       	brcs	.+2      	; 0x59a <__udivmodqi4_ep>
 598:	96 1b       	sub	r25, r22

0000059a <__udivmodqi4_ep>:
 59a:	88 1f       	adc	r24, r24
 59c:	7a 95       	dec	r23
 59e:	c9 f7       	brne	.-14     	; 0x592 <__udivmodqi4_loop>
 5a0:	80 95       	com	r24
 5a2:	08 95       	ret

000005a4 <_exit>:
 5a4:	f8 94       	cli

000005a6 <__stop_program>:
 5a6:	ff cf       	rjmp	.-2      	; 0x5a6 <__stop_program>
